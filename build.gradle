plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.sdemo1'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

//Qclass가 생성될 곳을 정의한다.
def querydslSrcDir = 'src/main/generated'
sourceSets {
  main {
    java {
      srcDirs += [ querydslSrcDir ]
    }
  }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

    // AWS
    implementation 'software.amazon.awssdk:s3:2.20.82'
    implementation 'software.amazon.awssdk:auth:2.20.82'
    implementation 'software.amazon.awssdk:regions:2.20.82'
    implementation 'software.amazon.awssdk:core:2.20.82'

    // Lombok 라이브러리 추가
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // 테스트 시 Lombok 사용
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Database
    implementation 'com.mysql:mysql-connector-j:8.0.33'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'


    //h2 데이터베이스
    implementation 'com.h2database:h2'
    
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Utils
    implementation 'org.fusesource.jansi:jansi:1.18'
}

compileJava {
    options.compilerArgs << '-parameters'
}

tasks.named('test') {
    useJUnitPlatform()
}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    dependencies {
//        exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat')
    }
    into('lib') {
        from(configurations.compileClasspath) {
            exclude 'tomcat-embed-*'
        }
    }
}