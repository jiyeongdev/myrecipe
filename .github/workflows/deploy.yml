name: Deploy to ECS on Development Push

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - '**/*.md'
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'settings.gradle'
      - 'gradle.properties'
      - '.github/workflows/deploy.yml'

env:
  ENVIRONMENT: ${{ 
    if(vars.ENVIRONMENT == 'dev', 'development', 
      if(vars.ENVIRONMENT == 'test', 'test',
        if(vars.ENVIRONMENT == 'production', 'production',
          'development'
        )
      )
    )}}
  DEPLOY: ${{ env.DEPLOY || 'Y' }}
  echo "Deploy: ${{ env.DEPLOY }}"

jobs:
  build-and-deploy:
    if: env.DEPLOY == 'Y'
    runs-on: ubuntu-latest

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 배포 정보 출력
      - name: Print deployment information
        run: |
          echo "=== 배포 정보 ==="
          echo "AWS Account ID: ${{ secrets.AWS_ACCOUNT_ID }}"
          echo "AWS Region: ${{ vars.AWS_REGION }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "ECR Repository: ${{ vars.ECR_REPOSITORY_NAME }}"
          echo "ECS Cluster: ${{ vars.ECS_CLUSTER }}"
          echo "ECS Service: ${{ vars.ECS_SERVICE }}"

      # 3. Java 환경 설정 (Spring Boot 프로젝트용)
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 4. AWS CLI 설정 및 ECR 로그인
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 5. Gradle 캐시 설정 (빌드 속도 개선)
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      # 6. Docker 이미지 빌드
      - name: Build Docker image
        run: |
          IMAGE_TAG="${{ vars.ECR_REPOSITORY_NAME }}:${{ env.ENVIRONMENT }}"
          ./gradlew bootBuildImage --imageName=${IMAGE_TAG}

      # 7. ECR에 이미지 태그 지정 및 푸시
      - name: Tag and push image to Amazon ECR
        run: |
          ECR_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY_NAME }}"
          docker tag ${{ vars.ECR_REPOSITORY_NAME }}:${{ env.ENVIRONMENT }} ${ECR_URI}:${{ env.ENVIRONMENT }}
          docker push ${ECR_URI}:${{ env.ENVIRONMENT }}
          echo "Pushed image: ${ECR_URI}:${{ env.ENVIRONMENT }}"

      # 8. ECS 태스크 정의 업데이트 및 배포
      - name: Update ECS service
        run: |
          ECR_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY_NAME }}"
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ vars.AWS_REGION }}
          echo "ECS service ${{ vars.ECS_SERVICE }} updated with new image: ${ECR_URI}:${{ env.ENVIRONMENT }}"